comandos curso git
Configurar correo y nombre usuario primero desde menú edit/opciones


Inicializando un repositorio
Si seleccionas líneas de la transcripción en esta sección, irás a la marca de tiempo en el vídeo

Una de las grandes ventajas que tiene GitHub es que nos va a permitir a nosotros trabajar de diferentes formas. Vamos a poder trabajar tanto dentro de la nube como de manera local. Al poder trabajar de manera local, vamos a poder guardar nuestros archivos y utilizar diferentes formas para almacenarlos en el repositorio. En este caso, vamos a aprender cómo crear un repositorio de manera local que después puede ser integrado con GitHub, pero lo vamos a crear utilizando la consola. Para hacer eso, vamos a abrir la consola. En mi caso estoy utilizando macOS, así que estoy trabajando directamente dentro de la terminal. En el caso de los usuarios de Windows, pueden usar el programa Git Bash, que va a tener exactamente los mismos comandos y se va a ver muy similar a lo que estamos trabajando acá. Primero necesitamos abrir la carpeta donde se va a encontrar el repositorio. En este caso, yo tengo una carpeta ya creada dentro de mi escritorio. Voy a abrirla y vemos que por ahora no tiene ningún archivo. El archivo que aparece acá es un archivo de sistema de Mac, que básicamente es un archivo que podemos ignorar por ahora. Primero vamos a entrar a esta carpeta desde la terminal, así que vamos a poner el comando 'cd' y esto nos va a permitir cambiar de directorio. Y para que no tengamos ningún problema con la ruta, simplemente voy a arrastrar la carpeta y acá me va a aparecer automáticamente la ruta. Vamos a presionar Enter y ya me encuentro dentro de esta carpeta a través de la consola. Para inicializar el repositorio de Git, simplemente llamo al comando 'git init' y esto va a inicializar un repositorio dentro de esta carpeta. Ahora vamos a abrir la carpeta y vamos a encontrar una carpeta '.git'. Es posible que no logres verla dentro de tu sistema operativo porque yo le tengo activado a mi computador que muestre los archivos ocultos, así que en el caso de que no se muestre, no importa. De hecho, esta es una carpeta que generalmente se oculta porque realmente son archivos de sistema. Lo que va a pasar acá es que Git va a utilizar todos los archivos que se encuentran acá para llevar un control de versiones de la información de tu repositorio. Una vez que tengamos creado este repositorio, ya podemos comenzar a trabajar el código dentro de esta carpeta y todo va a quedar almacenado, y todas las versiones van a quedar también almacenadas dentro de Git.



Examinando el estado del repositorio
Si seleccionas líneas de la transcripción en esta sección, irás a la marca de tiempo en el vídeo

Git nos permite conocer cuál es el estado actual de nuestro repositorio. Podemos saber exactamente si todas las versiones de nuestros archivos o si todos los archivos que tenemos dentro de nuestro repositorio están correctamente almacenadas. Acá yo estoy trabajando dentro de la terminal del sistema y ya tengo abierta la carpeta en la que se encuentra mi repositorio. Dentro de esta carpeta tengo inicializado un repositorio de Git y por ahora no le he hecho ningún cambio. Vamos a llamar el comando 'git status', que me permite saber cuál es el estado actual de este repositorio. Por ahora, me dice que se encuentra dentro del "comnit" o envío de datos inicial y que todos los datos se encuentran sincronizados correctamente. Vamos a agregar un nuevo archivo. Solamente para hacer este ejemplo, yo voy a poner directamente un archivo. Puede ser que, mientras estés trabajando tu repositorio, puedas generar directamente nuevos archivos o que generes algún cambio dentro de los archivos que ya se encuentran dentro del repositorio. Vamos a ver ahora cómo ha cambiado el estado de este repositorio. Voy a volver a poner el comando 'git status' y vamos a ver que me muestra un mensaje diciéndome que este repositorio no se encuentra debidamente actualizado. De hecho, me muestra que el archivo que acabamos de agregar, el archivo '.txt', al menos en su última versión no se encuentra registrado. Esto significa que el archivo que acabamos de agregar no se encuentra debidamente incluido dentro del repositorio Git. De esta forma, nosotros podemos saber cuál es el estado en el que se encuentra nuestro repositorio y llevar un control de todos los archivos sin necesidad de inicializar ninguna herramienta; lo podemos hacer directamente desde la consola.



Agregando archivos y guardando versiones en GitHub
Si seleccionas líneas de la transcripción en esta sección, irás a la marca de tiempo en el vídeo

En esta lección vamos a aprender cómo agregar y modificar archivos dentro de un repositorio. Acá yo ya tengo abierta la terminal del sistema y tengo también abierta la carpeta en la que se encuentra mi repositorio. Acá estoy viendo la carpeta donde se encuentra el repositorio y vemos que todavía está vacía. Lo único que tiene son archivos propios del sistema. Voy a agregar directamente un archivo; en este caso, 'index.html'. Vamos a ir de nuevo a la terminal y vamos a utilizar el comando 'git status'. Vamos a ver que tenemos un nuevo archivo, 'index.html', que todavía no se encuentra incluido dentro de nuestro repositorio. Para agregarlo, utilizaremos el comando 'git add' y podemos utilizar diferentes opciones para este comando. Por ejemplo, puedo decirle que agregue directamente este archivo o que agregue, por ejemplo, únicamente los archivos con la extensión HTML, o la forma más sencilla, solo vamos a dejar un espacio, ponemos punto y esto va a agregar cualquier archivo que necesite ser agregado. Listo. Volvemos a repetir el comando 'git status' y vemos que ahora mi repositorio está listo para agregar este nuevo archivo, 'index.html'. Lo que va a pasar es que los cambios que acabamos de poner –en este caso, agregar un nuevo archivo– van a ser guardados dentro de nuestra versión, dentro de nuestro repositorio. Vamos a incluir esta versión dentro del repositorio con el comando 'git commit'. 'Git commit' lo que va a hacer es que va a enviar datos para que queden almacenados dentro del repositorio de manera permanente. Vamos a poner también un mensaje. Vamos a incluir entonces '-m' y este comando me permite a mí incluir un mensaje, que es una opción recomendada. Lo ideal es que nosotros siempre incluyamos un mensaje cada vez que enviemos datos, porque así las personas que revisen nuestro repositorio van a poder entender cuál fue el cambio que nosotros hicimos. Entonces, vamos a poner entre comillas 'agregar archivo index.html', cerramos comillas, presionamos Enter y ya tenemos listo lo que va a ser nuestro repositorio con este cambio. Ahora vamos a poner 'git status' una vez más y podemos ver que nuestro repositorio se encuentra en orden, todos los cambios que están ahí han sido almacenados y, por ejemplo, esta versión de 'index.html' ya se encuentra registrada y podemos accederla dentro del repositorio. Ahora, vamos a hacer un cambio rápido dentro de este archivo. Vamos a poner acá 'PRUEBA', vamos a guardar, cerramos el archivo. Cualquier cambio que nosotros hagamos dentro de este archivo va a estar registrado dentro del repositorio y Git lo va a detectar inmediatamente. Voy a volver a escribir el comando 'git status' y vamos a ver que ahora Git me dice que no es un archivo nuevo, sino que el archivo 'index.html' ha sido modificado. Vamos a guardar entonces esta versión. Repetimos el proceso, 'git add', y en este caso le voy a decir que agregue el archivo 'index.html'. Le estoy diciendo que agregue esta versión modificada de 'index.html'. Presionamos Enter y ahora tenemos nuestro 'index.html' en un estado de "staging". El "staging" es básicamente una opción que nos permite a nosotros guardar los cambios, pero todavía no están listos para estar dentro del repositorio. Voy a ponerlo directamente en el repositorio utilizando de nuevo el comando 'git commit' y en este caso vamos a poner también un mensaje, y va a ser 'cambios en 'index.html'. Cerramos comillas, presionamos Enter y listo. Ahora revisamos una vez más, 'git status', y vemos que nuestro repositorio ya tiene almacenada la nueva versión de 'index.html'. Repitiendo constantemente este tipo de procesos es que nosotros vamos a poder tener registrados todos los posibles cambios de nuestros archivos y, en el caso de que tengamos algún error, podemos devolvernos inmediatamente a una versión que estuviera funcionando correctamente.



Agregando archivos y guardando versiones en GitHub
Si seleccionas líneas de la transcripción en esta sección, irás a la marca de tiempo en el vídeo

En esta lección vamos a aprender cómo agregar y modificar archivos dentro de un repositorio. Acá yo ya tengo abierta la terminal del sistema y tengo también abierta la carpeta en la que se encuentra mi repositorio. Acá estoy viendo la carpeta donde se encuentra el repositorio y vemos que todavía está vacía. Lo único que tiene son archivos propios del sistema. Voy a agregar directamente un archivo; en este caso, 'index.html'. Vamos a ir de nuevo a la terminal y vamos a utilizar el comando 'git status'. Vamos a ver que tenemos un nuevo archivo, 'index.html', que todavía no se encuentra incluido dentro de nuestro repositorio. Para agregarlo, utilizaremos el comando 'git add' y podemos utilizar diferentes opciones para este comando. Por ejemplo, puedo decirle que agregue directamente este archivo o que agregue, por ejemplo, únicamente los archivos con la extensión HTML, o la forma más sencilla, solo vamos a dejar un espacio, ponemos punto y esto va a agregar cualquier archivo que necesite ser agregado. Listo. Volvemos a repetir el comando 'git status' y vemos que ahora mi repositorio está listo para agregar este nuevo archivo, 'index.html'. Lo que va a pasar es que los cambios que acabamos de poner –en este caso, agregar un nuevo archivo– van a ser guardados dentro de nuestra versión, dentro de nuestro repositorio. Vamos a incluir esta versión dentro del repositorio con el comando 'git commit'. 'Git commit' lo que va a hacer es que va a enviar datos para que queden almacenados dentro del repositorio de manera permanente. Vamos a poner también un mensaje. Vamos a incluir entonces '-m' y este comando me permite a mí incluir un mensaje, que es una opción recomendada. Lo ideal es que nosotros siempre incluyamos un mensaje cada vez que enviemos datos, porque así las personas que revisen nuestro repositorio van a poder entender cuál fue el cambio que nosotros hicimos. Entonces, vamos a poner entre comillas 'agregar archivo index.html', cerramos comillas, presionamos Enter y ya tenemos listo lo que va a ser nuestro repositorio con este cambio. Ahora vamos a poner 'git status' una vez más y podemos ver que nuestro repositorio se encuentra en orden, todos los cambios que están ahí han sido almacenados y, por ejemplo, esta versión de 'index.html' ya se encuentra registrada y podemos accederla dentro del repositorio. Ahora, vamos a hacer un cambio rápido dentro de este archivo. Vamos a poner acá 'PRUEBA', vamos a guardar, cerramos el archivo. Cualquier cambio que nosotros hagamos dentro de este archivo va a estar registrado dentro del repositorio y Git lo va a detectar inmediatamente. Voy a volver a escribir el comando 'git status' y vamos a ver que ahora Git me dice que no es un archivo nuevo, sino que el archivo 'index.html' ha sido modificado. Vamos a guardar entonces esta versión. Repetimos el proceso, 'git add', y en este caso le voy a decir que agregue el archivo 'index.html'. Le estoy diciendo que agregue esta versión modificada de 'index.html'. Presionamos Enter y ahora tenemos nuestro 'index.html' en un estado de "staging". El "staging" es básicamente una opción que nos permite a nosotros guardar los cambios, pero todavía no están listos para estar dentro del repositorio. Voy a ponerlo directamente en el repositorio utilizando de nuevo el comando 'git commit' y en este caso vamos a poner también un mensaje, y va a ser 'cambios en 'index.html'. Cerramos comillas, presionamos Enter y listo. Ahora revisamos una vez más, 'git status', y vemos que nuestro repositorio ya tiene almacenada la nueva versión de 'index.html'. Repitiendo constantemente este tipo de procesos es que nosotros vamos a poder tener registrados todos los posibles cambios de nuestros archivos y, en el caso de que tengamos algún error, podemos devolvernos inmediatamente a una versión que estuviera funcionando correctamente.


Enviar repositorios a GitHub
Si seleccionas líneas de la transcripción en esta sección, irás a la marca de tiempo en el vídeo

Vamos a aprender ahora cómo sincronizar un repositorio creado localmente a través de la consola con un repositorio que se encuentra directamente en GitHub. Acá yo ya me encuentro autenticado dentro del servicio en 'github.com' y voy a buscar la opción New repository. Con esto yo voy a crear un nuevo repositorio. Vamos a hacer rápidamente un repositorio y le vamos a poner de nombre 'mi-repositorio', le vamos a poner una descripción rápida –"prueba"–, vamos a hacer que el repositorio sea público y voy a proceder directamente a crearlo. Ahora, acá nos aparece información crucial para poder sincronizar ambos elementos. Tenemos acá, por ejemplo, la dirección de nuestro repositorio. En general, va a ser 'github.com', tu nombre de usuario y el nombre del repositorio. Como puedes ver, es un archivo con una extensión '.git'. Aquí es donde nosotros vamos a poder acceder, este va a ser nuestro punto de entrada para poder interactuar con el repositorio. De hecho, acá nos aparece una serie de comandos. Esos comandos que están acá es básicamente si necesitas comenzar de cero un repositorio. En mi caso, yo ya lo tengo inicializado dentro de mi equipo. Vamos a pasar a mi escritorio y yo tengo abierta la consola, y estoy apuntando a la carpeta donde se encuentra mi repositorio. En esta carpeta yo ya he inicializado un repositorio y, de hecho, tengo un archivo. Vamos a asegurarnos de que todos los archivos se encuentren debidamente registrados dentro del repositorio poniendo 'git status' y vemos que todo está funcionando correctamente, no hay que agregar ningún cambio. Estamos listos para enviar la información a GitHub. ¿Cómo vamos a hacer eso? Bueno, podemos copiar alguna de la información que nos está dando GitHub. Primero, nosotros necesitamos agregar este nuevo repositorio. En esta línea que está acá, que estoy marcando, podemos ver un comando que dice 'git remote add origin'. en este caso le estamos diciendo a Git que agregue un nuevo repositorio remoto y le ponemos la dirección que va a tener. Esta es la dirección, como habíamos visto más arriba, la dirección de nuestro repositorio dentro de GitHub. Vamos a copiar esta línea y la vamos a pegar dentro de la terminal. Listo. Ahora, este repositorio remoto se encuentra relacionado con nuestro proyecto. Aún los archivos no se encuentran en la nube, pero ya podemos enviarlos. Para enviarlos, vamos a utilizar este segundo comando: 'git push -u origin master'. Vamos a copiarlo y lo que estamos haciendo es que le estamos diciendo a Git que ejecute el comando 'push'. 'Push' lo que hace es que va a enviar información a otro repositorio. El repositorio al que vamos a enviar va a ser 'origin master'. Como ves acá, estamos definiendo que 'origin' es el repositorio de GitHub y 'master' es específicamente el "branch" o la rama en la que se encuentra. Al definir 'master', estamos hablando de la rama principal de nuestro repositorio. Vamos a presionar Enter y, si es la primera vez que ejecutas esto, te va a pedir tu nombre de usuario para GitHub. En este caso, pones tu nombre de usuario, también te va a pedir el "password" y va a enviar toda la información a través de la consola. No necesitas ningún FTP, ninguna conexión de servidor... la consola se va a encargar de enviar toda la información de tu equipo a la nube de GitHub. Vamos a revisar ahora el repositorio que tenemos nosotros creado en GitHub. Hasta hace unos segundos estaba vacío. Vamos a buscar acá 'mi-repositorio' y, como vemos, ya está nuestro archivo debidamente guardado, incluso podemos ver el texto. Ahora tenemos sincronizados dos diferentes repositorios y puedes seguir trabajando haciendo cambios de manera local, modificando tu repositorio y, cada vez que esté listo para almacenar tu información en la nube, repites este mismo Enviar repositorios a GitHub
Si seleccionas líneas de la transcripción en esta sección, irás a la marca de tiempo en el vídeo

Vamos a aprender ahora cómo sincronizar un repositorio creado localmente a través de la consola con un repositorio que se encuentra directamente en GitHub. Acá yo ya me encuentro autenticado dentro del servicio en 'github.com' y voy a buscar la opción New repository. Con esto yo voy a crear un nuevo repositorio. Vamos a hacer rápidamente un repositorio y le vamos a poner de nombre 'mi-repositorio', le vamos a poner una descripción rápida –"prueba"–, vamos a hacer que el repositorio sea público y voy a proceder directamente a crearlo. Ahora, acá nos aparece información crucial para poder sincronizar ambos elementos. Tenemos acá, por ejemplo, la dirección de nuestro repositorio. En general, va a ser 'github.com', tu nombre de usuario y el nombre del repositorio. Como puedes ver, es un archivo con una extensión '.git'. Aquí es donde nosotros vamos a poder acceder, este va a ser nuestro punto de entrada para poder interactuar con el repositorio. De hecho, acá nos aparece una serie de comandos. Esos comandos que están acá es básicamente si necesitas comenzar de cero un repositorio. En mi caso, yo ya lo tengo inicializado dentro de mi equipo. Vamos a pasar a mi escritorio y yo tengo abierta la consola, y estoy apuntando a la carpeta donde se encuentra mi repositorio. En esta carpeta yo ya he inicializado un repositorio y, de hecho, tengo un archivo. Vamos a asegurarnos de que todos los archivos se encuentren debidamente registrados dentro del repositorio poniendo 'git status' y vemos que todo está funcionando correctamente, no hay que agregar ningún cambio. Estamos listos para enviar la información a GitHub. ¿Cómo vamos a hacer eso? Bueno, podemos copiar alguna de la información que nos está dando GitHub. Primero, nosotros necesitamos agregar este nuevo repositorio. En esta línea que está acá, que estoy marcando, podemos ver un comando que dice 'git remote add origin'. en este caso le estamos diciendo a Git que agregue un nuevo repositorio remoto y le ponemos la dirección que va a tener. Esta es la dirección, como habíamos visto más arriba, la dirección de nuestro repositorio dentro de GitHub. Vamos a copiar esta línea y la vamos a pegar dentro de la terminal. Listo. Ahora, este repositorio remoto se encuentra relacionado con nuestro proyecto. Aún los archivos no se encuentran en la nube, pero ya podemos enviarlos. Para enviarlos, vamos a utilizar este segundo comando: 'git push -u origin master'. Vamos a copiarlo y lo que estamos haciendo es que le estamos diciendo a Git que ejecute el comando 'push'. 'Push' lo que hace es que va a enviar información a otro repositorio. El repositorio al que vamos a enviar va a ser 'origin master'. Como ves acá, estamos definiendo que 'origin' es el repositorio de GitHub y 'master' es específicamente el "branch" o la rama en la que se encuentra. Al definir 'master', estamos hablando de la rama principal de nuestro repositorio. Vamos a presionar Enter y, si es la primera vez que ejecutas esto, te va a pedir tu nombre de usuario para GitHub. En este caso, pones tu nombre de usuario, también te va a pedir el "password" y va a enviar toda la información a través de la consola. No necesitas ningún FTP, ninguna conexión de servidor... la consola se va a encargar de enviar toda la información de tu equipo a la nube de GitHub. Vamos a revisar ahora el repositorio que tenemos nosotros creado en GitHub. Hasta hace unos segundos estaba vacío. Vamos a buscar acá 'mi-repositorio' y, como vemos, ya está nuestro archivo debidamente guardado, incluso podemos ver el texto. Ahora tenemos sincronizados dos diferentes repositorios y puedes seguir trabajando haciendo cambios de manera local, modificando tu repositorio y, cada vez que esté listo para almacenar tu información en la nube, repites este mismo 

